1. Would it be sufficient just to add to the old algorithms from task5 additional mutex variable to organize critical setions in functions grab_forks() and put_away_forks() for making changes to values of two mutexes indivisibly? If not, why?

Both algorithms are diffrent because in semaphore task we used the possibility to block two forks at the same time. In this time process can block two other processes in the same time which avoid deadlock situation when one process grabs one fork and second one. Initializing semaphores to one allows for the first process to pass but the second one which also will be trying to grab fork wil be blocked untill the first one will not finish.

2. Why m mutex is initialized with 1 and mutexes from the array s are initialized with 0's?

Mutex m is initialized with 1 because when we enter a critical section that compares or changes philosopher state we don't want any other thread to check or change it's current state as it may be changed by thread which currently possesed mutex m. 
Array s of mutexes is initialized with 0 to block philosopher thread after an attempt to grab forks. Such philosopher may be unblocked by it's neighboring philosopher which signals it's neighboring philosophers that they cay move to EATING phase via test method if conditions are met.
